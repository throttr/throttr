name: Release

on:
  push:
    branches:
      - master
    tags:
      - '*'

env:
  VERSION: ${{ github.ref_name }}

permissions:
  contents: write

jobs:
  build:
    name: Build and create release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        type: [Release, Debug]
        size: [UINT8, UINT16, UINT32, UINT64]

    container:
      image: ghcr.io/throttr/builder-alpine:1.87.0-debug

    steps:
      - uses: actions/checkout@v4

      - name: Build and test
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.type }} -DBUILD_TESTS=OFF -DRUNTIME_VALUE_SIZE=${{ matrix.size }} -DENABLE_STATIC_LINKING=ON
          make -j4
          cd ..
          mkdir -p dist
          cp build/throttr dist/
          cp LICENSE dist/
          cd dist && zip throttr-${{ matrix.type }}-${{ matrix.size }}.zip throttr LICENSE

      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          files: dist/throttr-${{ matrix.type }}-${{ matrix.size }}.zip

  merge:
    name: Merge manifests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_type == 'tag'

    steps:
      - uses: actions/checkout@v4

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ env.VERSION }}-${{ matrix.type }}-${{ matrix.size }}

      - name: Create and push manifest
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect
        run: docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
